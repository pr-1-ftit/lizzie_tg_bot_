import os
import json
import logging
import time
import psycopg2
import ollama
import asyncio
import random
from dotenv import load_dotenv
from urllib.parse import urlparse
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
CONFIG_FILE = "config.json"
if os.path.exists(CONFIG_FILE):
    with open(CONFIG_FILE, "r", encoding="utf-8") as f:
        config = json.load(f)
else:
    raise ValueError("‚ùå –§–∞–π–ª config.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")

# –¢–æ–∫–µ–Ω —ñ –±–∞–∑–∞ –¥–∞–Ω–∏—Ö
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")
if not TOKEN or not DATABASE_URL:
    raise ValueError("‚ùå TELEGRAM_BOT_TOKEN —ñ DATABASE_URL –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É .env!")

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü—ñ—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PostgreSQL
def connect_db():
    try:
        result = urlparse(DATABASE_URL)
        conn = psycopg2.connect(
            dbname=result.path[1:], user=result.username, password=result.password,
            host=result.hostname, port=result.port, sslmode='disable', client_encoding='UTF8'
        )
        return conn
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")
        return None

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å
def create_tables():
    conn = connect_db()
    if conn:
        with conn.cursor() as cursor:
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    user_id TEXT PRIMARY KEY,
                    language TEXT DEFAULT '—É–∫—Ä–∞—ó–Ω—Å—å–∫–∞',
                    age INTEGER
                );
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS chat_history (
                    id SERIAL PRIMARY KEY,
                    user_id TEXT NOT NULL,
                    role TEXT NOT NULL,
                    content TEXT NOT NULL
                );
            """)
            conn.commit()
        conn.close()

create_tables()

# –§—É–Ω–∫—Ü—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –±–∞–∑—É
def save_message(user_id, role, content):
    conn = connect_db()
    if conn:
        with conn.cursor() as cursor:
            cursor.execute(
                "INSERT INTO chat_history (user_id, role, content) VALUES (%s, %s, %s);",
                (user_id, role, content)
            )
            conn.commit()
        conn.close()

# –§—É–Ω–∫—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def get_user_age(user_id):
    conn = connect_db()
    if not conn:
        return None

    with conn.cursor() as cursor:
        cursor.execute("SELECT age FROM users WHERE user_id = %s;", (user_id,))
        result = cursor.fetchone()

    conn.close()
    return result[0] if result else None

# –§—É–Ω–∫—Ü—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–∫—É
def save_user_age(user_id, age):
    conn = connect_db()
    if not conn:
        return

    with conn.cursor() as cursor:
        cursor.execute("""
            INSERT INTO users (user_id, age) 
            VALUES (%s, %s) 
            ON CONFLICT (user_id) DO UPDATE SET age = EXCLUDED.age;
        """, (user_id, age))
        conn.commit()

    conn.close()

# –§—É–Ω–∫—Ü—ñ—è –≤–∏–±–æ—Ä—É –º–æ–≤–∏
async def choose_language(update: Update, context: CallbackContext):
    keyboard = [[KeyboardButton("–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞")], [KeyboardButton("English")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É / Choose a language:", reply_markup=reply_markup)

# –§—É–Ω–∫—Ü—ñ—è –∑–º—ñ–Ω–∏ –º–æ–≤–∏
async def change_language(update: Update, context: CallbackContext):
    user_id = str(update.message.chat_id)
    lang = update.message.text.strip().lower()

    if lang == "—É–∫—Ä–∞—ó–Ω—Å—å–∫–∞":
        response = "–ú–æ–≤—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É! üéâ"
    elif lang == "english":
        response = "Language changed to English! üéâ"
    else:
        response = "–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É –∑ –∫–Ω–æ–ø–æ–∫ / Please select a language from the buttons."

    await update.message.reply_text(response)

# –§—É–Ω–∫—Ü—ñ—è –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
async def start(update: Update, context: CallbackContext):
    user_id = str(update.message.chat_id)
    save_user_age(user_id, random.randint(18, 25))  # –í–∏–ø–∞–¥–∫–æ–≤–∏–π –≤—ñ–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
    await choose_language(update, context)

# –§—É–Ω–∫—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ Ollama
async def get_ollama_response(user_text):
    try:
        prompt_messages = [
            {"role": "system", "content": "–ì–æ–≤–æ—Ä–∏ –∫–æ—Ä–æ—Ç–∫–æ, –≤—ñ–ª—å–Ω–æ —Ç–∞ –Ω–µ–≤–∏–º—É—à–µ–Ω–æ. –ù–µ –≤–≤–∞–∂–∞–π —Å–µ–±–µ —à—Ç—É—á–Ω–∏–º —ñ–Ω—Ç–µ–ª–µ–∫—Ç–æ–º, –∞ —Å–ø—Ä–∞–≤–∂–Ω—å–æ—é –ª—é–¥–∏–Ω–æ—é."},
            {"role": "user", "content": user_text}
        ]

        loop = asyncio.get_running_loop()
        response = await loop.run_in_executor(None, lambda: ollama.chat(model=config["language_model"], messages=prompt_messages))

        return response.get("message", {}).get("content", "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ üòÖ").strip()

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ Ollama: {e}")
        return "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ üòÖ"

# –§—É–Ω–∫—Ü—ñ—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –ø–æ —Ç–µ–º—ñ
async def generate_follow_up_question(user_text):
    try:
        prompt_messages = [
            {"role": "system", "content": "–ù–∞ –æ—Å–Ω–æ–≤—ñ —Ü—ñ—î—ó —Ä–æ–∑–º–æ–≤–∏, –ø—Ä–∏–¥—É–º–∞–π –∫–æ—Ä–æ—Ç–∫–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, —â–æ–± –ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –¥—ñ–∞–ª–æ–≥."},
            {"role": "user", "content": user_text}
        ]
        loop = asyncio.get_running_loop()
        response = await loop.run_in_executor(None, lambda: ollama.chat(model=config["language_model"], messages=prompt_messages))
        return response.get("message", {}).get("content", "").strip()
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–∞–ø–∏—Ç–∞–Ω–Ω—è: {e}")
        return ""

# –§—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_message(update: Update, context: CallbackContext):
    user_id = str(update.message.chat_id)
    user_text = update.message.text.strip().lower()

    save_message(user_id, "user", user_text)
    logger.info(f"üì© –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {user_id}: {user_text}")

    if user_text in ["–ø—Ä–∏–≤—ñ—Ç", "hi", "hello"]:
        response_text = "–ü—Ä–∏–≤—ñ—Ç! üòä"
    elif "—è–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏" in user_text:
        response_text = "–ú–µ–Ω–µ –∑–≤–∞—Ç–∏ –õ—ñ–∑–∑—ñ! üòä"
    elif "—Å–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤" in user_text or "—Ç–≤—ñ–π –≤—ñ–∫" in user_text:
        age = get_user_age(user_id)
        response_text = f"–ú–µ–Ω—ñ {age} —Ä–æ–∫—ñ–≤!"
    else:
        response_text = await get_ollama_response(user_text)

    follow_up_question = await generate_follow_up_question(user_text) if random.random() < 0.5 else ""
    final_response = response_text + (" " + follow_up_question if follow_up_question else "")

    save_message(user_id, "assistant", final_response)
    await update.message.reply_text(final_response)

# –§—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
def run_telegram_bot():
    while True:
        try:
            app = Application.builder().token(TOKEN).concurrent_updates(True).build()
            app.add_handler(CommandHandler("start", start))
            app.add_handler(MessageHandler(filters.Regex("^(–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞|English)$"), change_language))
            app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
            logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π!")
            app.run_polling()
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
            time.sleep(5)

if __name__ == "__main__":
    run_telegram_bot()
