import os
import logging
import ollama
import json
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –§–∞–π–ª –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó
HISTORY_FILE = "chat_history.json"

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —á–∞—Ç—É
if os.path.exists(HISTORY_FILE) and os.path.getsize(HISTORY_FILE) > 0:
    try:
        with open(HISTORY_FILE, "r", encoding="utf-8") as file:
            chat_history = json.load(file)
    except json.JSONDecodeError:
        logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è JSON! –û—á–∏—â—É—î–º–æ —Ñ–∞–π–ª...")
        chat_history = {}
else:
    chat_history = {}


# –§—É–Ω–∫—Ü—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó
def save_history():
    with open(HISTORY_FILE, "w", encoding="utf-8") as file:
        json.dump(chat_history, file, ensure_ascii=False, indent=4)


# –°–ª–æ–≤–Ω–∏–∫–∏ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
user_languages = {}

# –¢–µ–∫—Å—Ç–∏ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –Ω–∞ —Ä—ñ–∑–Ω–∏—Ö –º–æ–≤–∞—Ö
LANGUAGES = {
    "en": "Hello! I am Lizzi, your supportive assistant. Let's chat and improve together!",
    "uk": "–ü—Ä–∏–≤—ñ—Ç! –Ø –õ—ñ–∑–∑—ñ, —Ç–≤—ñ–π –ø—ñ–¥—Ç—Ä–∏–º—É—é—á–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç. –î–∞–≤–∞–π —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è —ñ —Ä–æ–∑–≤–∏–≤–∞—Ç–∏—Å—è —Ä–∞–∑–æ–º!"
}


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
async def start(update: Update, context: CallbackContext):
    keyboard = [[KeyboardButton("English")], [KeyboardButton("–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

    await update.message.reply_text("Choose your language / –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:", reply_markup=reply_markup)


# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –º–æ–≤–∏
async def set_language(update: Update, context: CallbackContext):
    user_id = str(update.message.chat_id)
    language = update.message.text.lower()

    if language in ["english", "–∞–Ω–≥–ª—ñ–π—Å—å–∫–∞"]:
        user_languages[user_id] = "en"
    elif language in ["—É–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "ukrainian"]:
        user_languages[user_id] = "uk"
    else:
        await update.message.reply_text("Please choose either 'English' or '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞'.")
        return

    chat_history[user_id] = {"language": user_languages[user_id], "context": []}
    save_history()
    await update.message.reply_text(LANGUAGES[user_languages[user_id]])


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ Ollama
async def get_gemma_response(user_id, user_message):
    try:
        if user_id not in chat_history:
            chat_history[user_id] = {"language": "uk", "context": []}

        chat_history[user_id]["context"].append({"role": "user", "content": user_message})

        response = ollama.chat(
            model="gemma:7b",
            messages=chat_history[user_id]["context"]
        )
        bot_response = response["message"]["content"]

        chat_history[user_id]["context"].append({"role": "assistant", "content": bot_response})
        save_history()
        return bot_response
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ Ollama: {e}")
        return "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ üòï"


# –û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_message(update: Update, context: CallbackContext):
    user_id = str(update.message.chat_id)
    user_text = update.message.text

    ai_response = await get_gemma_response(user_id, user_text)
    await update.message.reply_text(ai_response)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É —á–∞—Ç—É
async def restart(update: Update, context: CallbackContext):
    user_id = str(update.message.chat_id)
    if user_id in chat_history:
        chat_history[user_id]["context"] = []
        save_history()
    await update.message.reply_text("üîÑ –†–æ–∑–º–æ–≤–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞! –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –∑ —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞.")


# –§—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
def run_telegram_bot():
    if not TOKEN:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return

    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("setlanguage", set_language))
    app.add_handler(CommandHandler("restart", restart))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π...")
    app.run_polling()


# –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
if __name__ == "__main__":
    run_telegram_bot()
