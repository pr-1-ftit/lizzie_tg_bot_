import os
import logging
import ollama
import random
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–ª–æ–≤–Ω–∏–∫–∏ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
user_context = {}
user_gender = {}  # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—ñ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞
user_questions = {}  # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –≤–∂–µ –∑–∞–¥–∞–Ω–∏—Ö –ø–∏—Ç–∞–Ω—å

# –ë–∞–∑–∞ –ø–∏—Ç–∞–Ω—å –¥–ª—è –∫–æ–∂–Ω–æ—ó —Å—Ç–∞—Ç—ñ
QUESTION_SETS = {
    "—á–æ–ª–æ–≤—ñ–∫": [
        "–ê —Ç–∏ —è–∫ –¥—É–º–∞—î—à?",
        "–ß–∏–º –∑–∞—Ä–∞–∑ –∑–∞–π–º–∞—î—à—Å—è?",
        "–Ø–∫—ñ —É —Ç–µ–±–µ –ø–ª–∞–Ω–∏ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ?",
        "–©–æ –æ—Å—Ç–∞–Ω–Ω—ñ–º —á–∞—Å–æ–º —Ç–µ–±–µ –≤—Ä–∞–∑–∏–ª–æ?",
        "–Ñ —â–æ—Å—å —Ü—ñ–∫–∞–≤–µ, —â–æ —Ç–∏ –± —Ö–æ—Ç—ñ–≤ –æ–±–≥–æ–≤–æ—Ä–∏—Ç–∏?",
        "–Ø–∫–∏–π –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ñ—ñ–ª—å–º –∞–±–æ —Å–µ—Ä—ñ–∞–ª —Ç–∏ –¥–∏–≤–∏–≤—Å—è?",
    ],
    "–∂—ñ–Ω–∫–∞": [
        "–ê —Ç–∏ —è–∫ –¥—É–º–∞—î—à? üòè",
        "–ß–∏–º –∑–∞–π–º–∞—î—à—Å—è, –∫—Ä–∞—Å—É–Ω–µ?",
        "–Ø–∫—ñ —É —Ç–µ–±–µ –ø–ª–∞–Ω–∏, —Å–æ–Ω–µ—á–∫–æ?",
        "–©–æ –æ—Å—Ç–∞–Ω–Ω—ñ–º —á–∞—Å–æ–º —Ç–µ–±–µ –≤—Ä–∞–∑–∏–ª–æ?",
        "–Ñ —â–æ—Å—å —Ü—ñ–∫–∞–≤–µ, —â–æ —Ç–∏ –± —Ö–æ—Ç—ñ–ª–∞ –æ–±–≥–æ–≤–æ—Ä–∏—Ç–∏?",
        "–Ø–∫–∏–π –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ñ—ñ–ª—å–º –∞–±–æ —Å–µ—Ä—ñ–∞–ª —Ç–∏ –¥–∏–≤–∏–ª–∞—Å—è?",
    ],
}


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è
def get_unique_question(user_id):
    gender = user_gender.get(user_id, "—á–æ–ª–æ–≤—ñ–∫")

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —â–µ –Ω–µ –æ—Ç—Ä–∏–º—É–≤–∞–≤ –ø–∏—Ç–∞–Ω—å, —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –π–æ–º—É —Å–ø–∏—Å–æ–∫
    if user_id not in user_questions or not user_questions[user_id]:
        user_questions[user_id] = QUESTION_SETS[gender].copy()
        random.shuffle(user_questions[user_id])  # –ü–µ—Ä–µ–º—ñ—à—É—î–º–æ —Å–ø–∏—Å–æ–∫ –ø–∏—Ç–∞–Ω—å

    return user_questions[user_id].pop()  # –í–∏–±–∏—Ä–∞—î–º–æ –ø–∏—Ç–∞–Ω–Ω—è —Ç–∞ –≤–∏–¥–∞–ª—è—î–º–æ –π–æ–≥–æ –∑—ñ —Å–ø–∏—Å–∫—É


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ Gemma —á–µ—Ä–µ–∑ Ollama
def get_gemma_response(user_id, user_message):
    try:
        if user_id not in user_context:
            user_context[user_id] = [{"role": "system", "content": "–ë—É–¥—å –ø—Ä–∏—Ä–æ–¥–Ω–æ—é, –∂–∏–≤–æ—é, –∑–±–µ—Ä—ñ–≥–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–æ–∑–º–æ–≤–∏."}]

        user_context[user_id].append({"role": "user", "content": user_message})

        # –§—ñ–∫—Å–æ–≤–∞–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        user_message_lower = user_message.lower()

        if "—Ç–≤–æ—î —ñ–º'—è" in user_message_lower or "—è–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏" in user_message_lower:
            return "–ú–µ–Ω–µ –∑–≤–∞—Ç–∏ Lizzi üòä"

        if "—è–∫ —Å–ø—Ä–∞–≤–∏" in user_message_lower:
            return random.choice(["–ß—É–¥–æ–≤–æ! –ê —Ç–∏?", "–ù–µ–ø–æ–≥–∞–Ω–æ, —Ç—ñ–ª—å–∫–∏ —â–æ –∫–∞–≤—É –ø–∏–ª–∞. –ê —É —Ç–µ–±–µ —è–∫?", "–¢–∞ –Ω–æ—Ä–º, —Ç—Ä–æ—Ö–∏ —Å—É–º—É—é."])

        if "—Å–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤" in user_message_lower or "—è–∫–∏–π —Ç–≤—ñ–π –≤—ñ–∫" in user_message_lower:
            age = random.randint(18, 25)
            return f"–ú–µ–Ω—ñ {age} üòä"

        response = ollama.chat(model="gemma:7b", messages=user_context[user_id])
        bot_response = response["message"]["content"]

        # –û–±–º–µ–∂–µ–Ω–Ω—è –¥–æ–≤–∂–∏–Ω–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        if len(bot_response) > 100:
            bot_response = bot_response[:100] + "..."

        user_context[user_id].append({"role": "assistant", "content": bot_response})

        return bot_response
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ Ollama: {e}")
        return "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ üòï"


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
async def start(update: Update, context: CallbackContext):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –Ø Lizzi. –ù–∞–ø–∏—à–∏ /setgender —á–æ–ª–æ–≤—ñ–∫ –∞–±–æ /setgender –∂—ñ–Ω–∫–∞, —â–æ–± —è –ø—ñ–¥–ª–∞—à—Ç—É–≤–∞–ª–∞ —Å—Ç–∏–ª—å —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è üòä")


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /setgender
async def set_gender(update: Update, context: CallbackContext):
    user_id = update.message.chat_id
    if not context.args:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂–∏ —Å—Ç–∞—Ç—å: /setgender —á–æ–ª–æ–≤—ñ–∫ –∞–±–æ /setgender –∂—ñ–Ω–∫–∞.")
        return

    gender = context.args[0].lower()
    if gender in ["—á–æ–ª–æ–≤—ñ–∫", "–∂—ñ–Ω–∫–∞"]:
        user_gender[user_id] = gender
        user_questions[user_id] = []  # –û—á–∏—â–∞—î–º–æ –ø–∏—Ç–∞–Ω–Ω—è, —â–æ–± –æ–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø—ñ–¥ —Å—Ç–∞—Ç—å
        await update.message.reply_text(f"–û–∫–µ–π! –¢–µ–ø–µ—Ä —è –±—É–¥—É —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è –∑ —Ç–æ–±–æ—é —è–∫ –∑ {gender} ‚ù§Ô∏è")
    else:
        await update.message.reply_text("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è. –í–∏–±–µ—Ä–∏: /setgender —á–æ–ª–æ–≤—ñ–∫ –∞–±–æ /setgender –∂—ñ–Ω–∫–∞.")


# –û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_message(update: Update, context: CallbackContext):
    user_text = update.message.text
    user_id = update.message.chat_id

    ai_response = get_gemma_response(user_id, user_text)
    await update.message.reply_text(ai_response)

    # –î–æ–¥–∞—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –õ—ñ–∑–∑—ñ –ø—ñ—Å–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    if random.random() > 0.4:  # 60% —à–∞–Ω—Å –∑–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è
        question = get_unique_question(user_id)
        await update.message.reply_text(question)


# –§—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
def run_telegram_bot():
    if not TOKEN:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return

    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("setgender", set_gender))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π...")
    app.run_polling()


# –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
if __name__ == "__main__":
    run_telegram_bot()
